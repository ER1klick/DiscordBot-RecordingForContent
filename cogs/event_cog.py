# cogs/event_cog.py

import disnake
from disnake.ext import commands
import datetime
import re

from database.session import async_session_maker
from database.models import Event, BotRole, EventSlot
from database.crud import crud_event, crud_template, crud_user
from .template_cog import autocomplete_template_name

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã ---

def parse_date(date_str: str) -> int | None:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ Unix timestamp."""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç "–î–î.–ú–ú"
        if re.match(r"^\d{2}\.\d{2}$", date_str):
            day, month = map(int, date_str.split('.'))
            now = datetime.datetime.now()
            year = now.year
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if datetime.datetime(year, month, day) < datetime.datetime(now.year, now.month, now.day):
                year += 1
            dt_obj = datetime.datetime(year, month, day)
        # –ü—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç "–î–î.–ú–ú.–ì–ì–ì–ì"
        elif re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_str):
            dt_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y")
        else:
            return None
        return int(dt_obj.timestamp())
    except ValueError:
        return None

def format_event_embed(event: Event, guild: disnake.Guild) -> disnake.Embed:
    """–°–æ–∑–¥–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç Embed –¥–ª—è –∞–Ω–æ–Ω—Å–∞ —Å–æ–±—ã—Ç–∏—è."""
    embed = disnake.Embed(
        title=f"üìÖ {event.title}",
        description=event.description,
        color=disnake.Color.green()
    )
    embed.add_field(
        name="–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è",
        value=f"<t:{event.event_timestamp}:F> (<t:{event.event_timestamp}:R>)",
        inline=False
    )
    
    slot_texts = []
    for slot in sorted(event.slots, key=lambda s: s.slot_number):
        user_mention = f"<@{slot.signed_up_user_id}>" if slot.signed_up_user_id else "**[–°–≤–æ–±–æ–¥–Ω–æ]**"
        slot_texts.append(f"`{slot.slot_number}.` {slot.role_name}: {user_mention}")
    
    embed.add_field(
        name="–£—á–∞—Å—Ç–Ω–∏–∫–∏",
        value="\n".join(slot_texts) or "–°–ª–æ—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.",
        inline=False
    )
    
    owner = guild.get_member(event.owner_id)
    embed.set_footer(text=f"ID —Å–æ–±—ã—Ç–∏—è: {event.id} | –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {owner.display_name if owner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    return embed

class SignupModal(disnake.ui.Modal):
    def __init__(self, event: Event):
        self.event = event
        components = [
            disnake.ui.TextInput(
                label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 2, 4",
                custom_id="slot_input",
                style=disnake.TextInputStyle.short,
                max_length=50,
            ),
        ]
        super().__init__(title="–ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ", components=components)

    async def callback(self, inter: disnake.ModalInteraction):
        slot_input = inter.text_values["slot_input"]
        try:
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤–≤–æ–¥ –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
            requested_slot_numbers = sorted(list(set(int(s.strip()) for s in slot_input.split(','))))
        except (ValueError, TypeError):
            await inter.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π.", ephemeral=True)
            return

        # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞
        valid_slots = [
            slot for slot in self.event.slots 
            if slot.slot_number in requested_slot_numbers and slot.signed_up_user_id is None
        ]

        if not valid_slots:
            await inter.response.send_message("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.", ephemeral=True)
            return
        
        await inter.response.defer(ephemeral=True)
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
        thread = inter.channel.get_thread(self.event.thread_id)
        if not thread:
            message = await inter.channel.fetch_message(self.event.message_id)
            thread = await message.create_thread(name=f"–ó–∞—è–≤–∫–∏ –Ω–∞ '{self.event.title}'")
            async with async_session_maker() as session:
                await crud_event.update_event_thread_id(session, self.event.id, thread.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –≤–µ—Ç–∫—É
        async with async_session_maker() as session:
            for slot in valid_slots:
                msg = await thread.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.mention} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Å–ª–æ—Ç "
                                        f"`{slot.slot_number}. {slot.role_name}`. "
                                        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä <@{self.event.owner_id}>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å.")
                await msg.add_reaction("‚úÖ")
                await crud_event.create_signup_request(
                    session, message_id=msg.id, slot_id=slot.id, requester_id=inter.author.id
                )

        await inter.followup.send(f"‚úÖ –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–ª–æ—Ç—ã: {', '.join(str(s.slot_number) for s in valid_slots)} "
                                  f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–µ—Ç–∫—É {thread.mention} –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", ephemeral=True)


class SignupView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=disnake.ButtonStyle.success, custom_id="signup_button")
    async def signup_button(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        # –ù–∞—Ö–æ–¥–∏–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ—É—Ç–µ—Ä–∞ embed'–∞
        event_id_str = inter.message.embeds[0].footer.text.split(" | ")[0].replace("ID —Å–æ–±—ã—Ç–∏—è: ", "")
        
        async with async_session_maker() as session:
            event = await crud_event.get_event_by_id(session, int(event_id_str))
            if not event:
                await inter.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", ephemeral=True)
                return
        
        modal = SignupModal(event)
        await inter.response.send_modal(modal)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–≥ ---

class EventCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.view_added = False

    @commands.Cog.listener()
    async def on_ready(self):
        """–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."""
        if not self.view_added:
            self.bot.add_view(SignupView())
            self.view_added = True
            print("Persistent view 'SignupView' has been added.")

    # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö: –°–ù–ê–ß–ê–õ–ê –ë–ê–ó–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê...
    @commands.slash_command(name="event", description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏")
    async def event(self, inter: disnake.ApplicationCommandInteraction):
        pass

    # ... –ó–ê–¢–ï–ú –ï–ï –ü–û–î–ö–û–ú–ê–ù–î–ê
    @event.sub_command(name="create", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏")
    async def create(
        self,
        inter: disnake.ApplicationCommandInteraction,
        title: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"),
        description: str = commands.Param(description="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"),
        date: str = commands.Param(description="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì"),
        template: str = commands.Param(default=None, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Ä–æ–ª–µ–π", autocomplete=autocomplete_template_name),
        roles: str = commands.Param(default=None, description="–†–æ–ª–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ '|', –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω")
    ):
        await inter.response.defer(ephemeral=True)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session_maker() as session:
            user = await crud_user.get_or_create_user(session, inter.author.id, inter.author.name)
            if user.bot_role not in [BotRole.EVENT_CREATOR, BotRole.ADMIN]:
                await inter.followup.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.", ephemeral=True)
                return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Ä–æ–ª–µ–π/—à–∞–±–ª–æ–Ω–∞
        if not template and not roles:
            await inter.followup.send("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ —à–∞–±–ª–æ–Ω, –ª–∏–±–æ –ø–µ—Ä–µ—á–µ–Ω—å —Ä–æ–ª–µ–π.", ephemeral=True)
            return
        if template and roles:
            await inter.followup.send("–ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —à–∞–±–ª–æ–Ω, –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–æ–ª–µ–π.", ephemeral=True)
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        role_list = []
        if template:
            async with async_session_maker() as session:
                db_template = await crud_template.get_template_by_name(session, inter.guild.id, template)
                if not db_template:
                    await inter.followup.send(f"–®–∞–±–ª–æ–Ω '{template}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                    return
                role_list = [r.role_name for r in db_template.roles]
        else:
            role_list = [r.strip() for r in roles.split('|') if r.strip()]

        if not role_list:
            await inter.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π.", ephemeral=True)
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
        timestamp = parse_date(date)
        if not timestamp:
            await inter.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì.", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
        async with async_session_maker() as session:
            new_event = await crud_event.create_event_with_slots(
                session, owner_id=inter.author.id, title=title, description=description,
                event_timestamp=timestamp, role_names=role_list
            )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
            embed = format_event_embed(new_event, inter.guild)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
            msg = await inter.channel.send(embed=embed, view=SignupView())
            await crud_event.update_event_message_info(session, new_event.id, msg.id, inter.channel.id)
            await inter.followup.send(f"–°–æ–±—ã—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", ephemeral=True)


    @commands.Cog.listener("on_raw_reaction_add")
    async def on_raw_reaction_add(self, payload: disnake.RawReactionActionEvent):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ –Ω–µ —Ç–µ —ç–º–æ–¥–∑–∏
        if payload.user_id == self.bot.user.id or str(payload.emoji) != "‚úÖ":
            return

        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∑–∞–ø–∏—Å—å
            request = await crud_event.get_signup_request(session, payload.message_id)
            if not request:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
            slot_result = await session.get(EventSlot, request.slot_id)
            if not slot_result: return
            event = await session.get(Event, slot_result.event_id)
            if not event: return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–∫—Ü–∏—é –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è
            if payload.user_id != event.owner_id:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –µ—â–µ —Å–ª–æ—Ç
            if slot_result.signed_up_user_id is not None:
                return # –ö—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–Ω—è–ª —Å–ª–æ—Ç, –ø–æ–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥—É–º–∞–ª

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–æ–Ω—Å
            await crud_event.assign_user_to_slot(session, request.slot_id, request.requester_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
            updated_event = await crud_event.get_event_by_id(session, event.id)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∞–Ω–æ–Ω—Å
            try:
                channel = self.bot.get_channel(updated_event.channel_id) or await self.bot.fetch_channel(updated_event.channel_id)
                message = await channel.fetch_message(updated_event.message_id)
                new_embed = format_event_embed(updated_event, payload.member.guild)
                await message.edit(embed=new_embed)
            except (disnake.NotFound, disnake.Forbidden) as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {updated_event.id}: {e}")

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ
            try:
                thread = self.bot.get_channel(updated_event.thread_id) or await self.bot.fetch_channel(updated_event.thread_id)
                request_message = await thread.fetch_message(request.request_message_id)
                await request_message.edit(content=f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç <@{request.requester_id}> –Ω–∞ —Å–ª–æ—Ç "
                                                    f"`{slot_result.slot_number}. {slot_result.role_name}` **–æ–¥–æ–±—Ä–µ–Ω–∞**.")
                await request_message.clear_reactions()
            except (disnake.NotFound, disnake.Forbidden) as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {updated_event.id}: {e}")

def setup(bot: commands.Bot):
    bot.add_cog(EventCog(bot))