import disnake
from disnake.ext import commands
from sqlalchemy.exc import IntegrityError

from database.session import async_session_maker
from database.models import User, BotRole
from database.crud import crud_subscription, crud_user

# --- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≤–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä–æ–≤ ---
async def autocomplete_event_creators(inter: disnake.ApplicationCommandInteraction, user_input: str):
    async with async_session_maker() as session:
        creators = await crud_subscription.get_all_creators(session)
        return [
            creator.username for creator in creators 
            if user_input.lower() in creator.username.lower()
        ]

class SubscriptionCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="subscription", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π")
    async def subscription(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @subscription.sub_command(name="subscribe", description="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π")
    async def subscribe(
        self,
        inter: disnake.ApplicationCommandInteraction,
        creator: disnake.User = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
    ):
        async with async_session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≤–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä–æ–º
            target_user = await crud_user.get_or_create_user(session, creator.id, creator.name)
            if target_user.bot_role != BotRole.EVENT_CREATOR:
                await inter.response.send_message(
                    f"‚ùå –ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {creator.mention}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏–π.",
                    ephemeral=True
                )
                return
            
            try:
                await crud_subscription.add_subscription(session, inter.author.id, creator.id)
                await inter.response.send_message(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç {creator.mention}!",
                    ephemeral=True
                )
            except IntegrityError: # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await inter.response.send_message(
                    f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {creator.mention}.",
                    ephemeral=True
                )
    
    @subscription.sub_command(name="unsubscribe", description="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π")
    async def unsubscribe(
        self,
        inter: disnake.ApplicationCommandInteraction,
        creator: disnake.User = commands.Param(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è")
    ):
        async with async_session_maker() as session:
            success = await crud_subscription.remove_subscription(session, inter.author.id, creator.id)
            if success:
                await inter.response.send_message(
                    f"üóëÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {creator.mention}.",
                    ephemeral=True
                )
            else:
                await inter.response.send_message(
                    f"–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {creator.mention}.",
                    ephemeral=True
                )

    @subscription.sub_command(name="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    async def list_subscriptions(self, inter: disnake.ApplicationCommandInteraction):
        async with async_session_maker() as session:
            subscriptions = await crud_subscription.get_user_subscriptions(session, inter.author.id)

        if not subscriptions:
            await inter.response.send_message("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", ephemeral=True)
            return

        embed = disnake.Embed(
            title="üîî –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
            description="–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            color=disnake.Color.blurple()
        )
        sub_list = [f"- <@{user.user_id}>" for user in subscriptions]
        embed.add_field(name="–°–æ–∑–¥–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π", value="\n".join(sub_list))
        await inter.response.send_message(embed=embed, ephemeral=True)


def setup(bot):
    bot.add_cog(SubscriptionCog(bot))