import disnake
from disnake.ext import commands
from sqlalchemy.exc import IntegrityError

from database.session import async_session_maker
from database.crud import crud_template

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def autocomplete_template_name(inter: disnake.ApplicationCommandInteraction, user_input: str):
    async with async_session_maker() as session:
        templates = await crud_template.get_all_templates_for_guild(session, inter.guild.id)
        return [t.name for t in templates if user_input.lower() in t.name.lower()]

class TemplateCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="template", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Ä–æ–ª–µ–π")
    async def template(self, inter: disnake.ApplicationCommandInteraction):
        pass

    @template.sub_command(name="create", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
    async def create(
        self,
        inter: disnake.ApplicationCommandInteraction,
        name: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–µ–π–¥ 10–ø–ø–ª')"),
        roles: str = commands.Param(description="–†–æ–ª–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º '|' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç–∞–Ω–∫|—Ö–∏–ª|–¥–¥')")
    ):
        role_list = [r.strip() for r in roles.split('|') if r.strip()]
        if not role_list:
            await inter.followup.send("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏!", ephemeral=True)
            return

        async with async_session_maker() as session:
            try:
                await crud_template.create_template_with_roles(
                    session, guild_id=inter.guild.id, name=name, role_names=role_list
                )
                await inter.followup.send(
                    f"‚úÖ –®–∞–±–ª–æ–Ω **{name}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", ephemeral=True
                )
            except IntegrityError:
                await inter.followup.send(
                    f"‚ùå –®–∞–±–ª–æ–Ω —Å –∏–º–µ–Ω–µ–º **{name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True
                )

    @template.sub_command(name="list", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    async def list(self, inter: disnake.ApplicationCommandInteraction):
        async with async_session_maker() as session:
            templates = await crud_template.get_all_templates_for_guild(session, inter.guild.id)
        
        if not templates:
            await inter.followup.send("–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.", ephemeral=True)
            return

        embed = disnake.Embed(
            title="üìã –®–∞–±–ª–æ–Ω—ã —Ä–æ–ª–µ–π –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ",
            color=disnake.Color.blurple()
        )
        for t in templates:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç .roles
            role_names = ", ".join([r.role_name for r in t.roles]) if t.roles else "–ù–µ—Ç —Ä–æ–ª–µ–π"
            embed.add_field(name=f"üîπ {t.name}", value=f"`{role_names}`", inline=False)
        
        await inter.followup.send(embed=embed, ephemeral=True)

    @template.sub_command(name="delete", description="–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω")
    async def delete(
        self,
        inter: disnake.ApplicationCommandInteraction,
        name: str = commands.Param(description="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", autocomplete=autocomplete_template_name)
    ):
        
        async with async_session_maker() as session:
            success = await crud_template.delete_template(session, inter.guild.id, name)
        
        if success:
            await inter.followup.send(f"üóëÔ∏è –®–∞–±–ª–æ–Ω **{name}** –±—ã–ª —É–¥–∞–ª–µ–Ω.", ephemeral=True)
        else:
            await inter.followup.send(f"‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω **{name}**.", ephemeral=True)


def setup(bot):
    bot.add_cog(TemplateCog(bot))